"""register client and owner tables

Revision ID: 317afd36cf6d
Revises: 443e97a4b28b
Create Date: 2025-04-08 12:29:47.907907

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '317afd36cf6d'
down_revision: Union[str, None] = '443e97a4b28b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('owner',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('first_name', sa.String(length=50), nullable=False),
    sa.Column('last_name', sa.String(length=50), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('phone', sa.String(length=20), nullable=False),
    sa.Column('password', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('amenities_hotel',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('hotel_id', sa.Integer(), nullable=False),
    sa.Column('amenity_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['amenity_id'], ['amenities.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['hotel_id'], ['hotels.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('hotel_img',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('hotel_id', sa.Integer(), nullable=False),
    sa.Column('image_url', sa.String(length=255), nullable=False),
    sa.ForeignKeyConstraint(['hotel_id'], ['hotels.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('amenities_room',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('room_id', sa.Integer(), nullable=False),
    sa.Column('amenity_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['amenity_id'], ['amenities.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['room_id'], ['rooms.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('room_img',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('room_id', sa.Integer(), nullable=False),
    sa.Column('image_url', sa.String(length=255), nullable=False),
    sa.ForeignKeyConstraint(['room_id'], ['rooms.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_index('ix_owners_id', table_name='owners')
    op.drop_table('owners')
    op.drop_index('ix_people_id', table_name='people')
    op.drop_table('people')
    op.drop_index('ix_hotel_amenities_id', table_name='hotel_amenities')
    op.drop_table('hotel_amenities')
    op.drop_index('ix_media_id', table_name='media')
    op.drop_table('media')
    op.drop_index('ix_room_amenities_id', table_name='room_amenities')
    op.drop_table('room_amenities')
    op.drop_index('ix_addresses_id', table_name='addresses')
    op.drop_column('addresses', 'created_at')
    op.drop_column('addresses', 'updated_at')
    op.add_column('amenities', sa.Column('is_hotel', sa.Boolean(), nullable=False))
    op.drop_index('ix_amenities_id', table_name='amenities')
    op.drop_column('amenities', 'icon_url')
    op.alter_column('bookings', 'date_start',
               existing_type=sa.DATE(),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('bookings', 'date_end',
               existing_type=sa.DATE(),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.drop_index('ix_bookings_id', table_name='bookings')
    op.drop_constraint('bookings_room_id_fkey', 'bookings', type_='foreignkey')
    op.drop_constraint('bookings_client_id_fkey', 'bookings', type_='foreignkey')
    op.create_foreign_key(None, 'bookings', 'rooms', ['room_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'bookings', 'clients', ['client_id'], ['id'], ondelete='CASCADE')
    op.drop_column('bookings', 'guests_count')
    op.drop_column('bookings', 'total_price')
    op.add_column('clients', sa.Column('first_name', sa.String(length=50), nullable=False))
    op.add_column('clients', sa.Column('last_name', sa.String(length=50), nullable=False))
    op.add_column('clients', sa.Column('email', sa.String(length=255), nullable=False))
    op.add_column('clients', sa.Column('phone', sa.String(length=20), nullable=False))
    op.add_column('clients', sa.Column('password', sa.String(length=255), nullable=False))
    op.add_column('clients', sa.Column('birth_date', sa.DateTime(), nullable=False))
    op.add_column('clients', sa.Column('avatar_url', sa.String(length=250), nullable=True))
    op.drop_constraint('clients_person_id_key', 'clients', type_='unique')
    op.drop_index('ix_clients_id', table_name='clients')
    op.create_unique_constraint(None, 'clients', ['phone'])
    op.create_unique_constraint(None, 'clients', ['email'])
    op.drop_constraint('clients_person_id_fkey', 'clients', type_='foreignkey')
    op.drop_column('clients', 'person_id')
    op.drop_column('clients', 'updated_at')
    op.add_column('employees', sa.Column('first_name', sa.String(length=50), nullable=False))
    op.add_column('employees', sa.Column('last_name', sa.String(length=50), nullable=False))
    op.drop_constraint('employees_person_id_key', 'employees', type_='unique')
    op.drop_index('ix_employees_id', table_name='employees')
    op.drop_constraint('employees_hotel_id_fkey', 'employees', type_='foreignkey')
    op.drop_constraint('employees_person_id_fkey', 'employees', type_='foreignkey')
    op.create_foreign_key(None, 'employees', 'hotels', ['hotel_id'], ['id'], ondelete='CASCADE')
    op.drop_column('employees', 'work_experience')
    op.drop_column('employees', 'is_vacation')
    op.drop_column('employees', 'created_at')
    op.drop_column('employees', 'person_id')
    op.drop_column('employees', 'updated_at')
    op.drop_index('ix_hotels_id', table_name='hotels')
    op.drop_constraint('hotels_owner_id_fkey', 'hotels', type_='foreignkey')
    op.create_foreign_key(None, 'hotels', 'owner', ['owner_id'], ['id'])
    op.drop_column('hotels', 'created_at')
    op.drop_column('hotels', 'views')
    op.drop_column('hotels', 'updated_at')
    op.drop_index('ix_payment_errors_id', table_name='payment_errors')
    op.drop_constraint('payment_errors_payment_id_fkey', 'payment_errors', type_='foreignkey')
    op.create_foreign_key(None, 'payment_errors', 'payments', ['payment_id'], ['id'], ondelete='CASCADE')
    op.add_column('payments', sa.Column('is_card', sa.Boolean(), nullable=True))
    op.drop_index('ix_payments_id', table_name='payments')
    op.drop_constraint('payments_booking_id_fkey', 'payments', type_='foreignkey')
    op.create_foreign_key(None, 'payments', 'bookings', ['booking_id'], ['id'], ondelete='CASCADE')
    op.drop_column('payments', 'method')
    op.drop_column('payments', 'refund_amount')
    op.add_column('ratings', sa.Column('views', sa.Integer(), nullable=True))
    op.drop_index('ix_ratings_id', table_name='ratings')
    op.drop_constraint('ratings_user_id_fkey', 'ratings', type_='foreignkey')
    op.drop_constraint('ratings_hotel_id_fkey', 'ratings', type_='foreignkey')
    op.create_foreign_key(None, 'ratings', 'clients', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'ratings', 'hotels', ['hotel_id'], ['id'], ondelete='CASCADE')
    op.drop_column('ratings', 'comment')
    op.drop_index('ix_rooms_id', table_name='rooms')
    op.drop_constraint('rooms_hotel_id_fkey', 'rooms', type_='foreignkey')
    op.create_foreign_key(None, 'rooms', 'hotels', ['hotel_id'], ['id'], ondelete='CASCADE')
    op.drop_column('rooms', 'created_at')
    op.drop_column('rooms', 'updated_at')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('rooms', sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.add_column('rooms', sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'rooms', type_='foreignkey')
    op.create_foreign_key('rooms_hotel_id_fkey', 'rooms', 'hotels', ['hotel_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_index('ix_rooms_id', 'rooms', ['id'], unique=False)
    op.add_column('ratings', sa.Column('comment', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'ratings', type_='foreignkey')
    op.drop_constraint(None, 'ratings', type_='foreignkey')
    op.create_foreign_key('ratings_hotel_id_fkey', 'ratings', 'hotels', ['hotel_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key('ratings_user_id_fkey', 'ratings', 'people', ['user_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_index('ix_ratings_id', 'ratings', ['id'], unique=False)
    op.drop_column('ratings', 'views')
    op.add_column('payments', sa.Column('refund_amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('payments', sa.Column('method', postgresql.ENUM('CARD', 'CASH', name='paymentmethod'), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'payments', type_='foreignkey')
    op.create_foreign_key('payments_booking_id_fkey', 'payments', 'bookings', ['booking_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_index('ix_payments_id', 'payments', ['id'], unique=False)
    op.drop_column('payments', 'is_card')
    op.drop_constraint(None, 'payment_errors', type_='foreignkey')
    op.create_foreign_key('payment_errors_payment_id_fkey', 'payment_errors', 'payments', ['payment_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_index('ix_payment_errors_id', 'payment_errors', ['id'], unique=False)
    op.add_column('hotels', sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.add_column('hotels', sa.Column('views', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('hotels', sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'hotels', type_='foreignkey')
    op.create_foreign_key('hotels_owner_id_fkey', 'hotels', 'owners', ['owner_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_index('ix_hotels_id', 'hotels', ['id'], unique=False)
    op.add_column('employees', sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.add_column('employees', sa.Column('person_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('employees', sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.add_column('employees', sa.Column('is_vacation', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('employees', sa.Column('work_experience', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'employees', type_='foreignkey')
    op.create_foreign_key('employees_person_id_fkey', 'employees', 'people', ['person_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key('employees_hotel_id_fkey', 'employees', 'hotels', ['hotel_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_index('ix_employees_id', 'employees', ['id'], unique=False)
    op.create_unique_constraint('employees_person_id_key', 'employees', ['person_id'])
    op.drop_column('employees', 'last_name')
    op.drop_column('employees', 'first_name')
    op.add_column('clients', sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.add_column('clients', sa.Column('person_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.create_foreign_key('clients_person_id_fkey', 'clients', 'people', ['person_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_constraint(None, 'clients', type_='unique')
    op.drop_constraint(None, 'clients', type_='unique')
    op.create_index('ix_clients_id', 'clients', ['id'], unique=False)
    op.create_unique_constraint('clients_person_id_key', 'clients', ['person_id'])
    op.drop_column('clients', 'avatar_url')
    op.drop_column('clients', 'birth_date')
    op.drop_column('clients', 'password')
    op.drop_column('clients', 'phone')
    op.drop_column('clients', 'email')
    op.drop_column('clients', 'last_name')
    op.drop_column('clients', 'first_name')
    op.add_column('bookings', sa.Column('total_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.add_column('bookings', sa.Column('guests_count', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'bookings', type_='foreignkey')
    op.drop_constraint(None, 'bookings', type_='foreignkey')
    op.create_foreign_key('bookings_client_id_fkey', 'bookings', 'clients', ['client_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key('bookings_room_id_fkey', 'bookings', 'rooms', ['room_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_index('ix_bookings_id', 'bookings', ['id'], unique=False)
    op.alter_column('bookings', 'date_end',
               existing_type=sa.DateTime(),
               type_=sa.DATE(),
               existing_nullable=False)
    op.alter_column('bookings', 'date_start',
               existing_type=sa.DateTime(),
               type_=sa.DATE(),
               existing_nullable=False)
    op.add_column('amenities', sa.Column('icon_url', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.create_index('ix_amenities_id', 'amenities', ['id'], unique=False)
    op.drop_column('amenities', 'is_hotel')
    op.add_column('addresses', sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.add_column('addresses', sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.create_index('ix_addresses_id', 'addresses', ['id'], unique=False)
    op.create_table('room_amenities',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('room_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('hotel_amenities_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_paid', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['hotel_amenities_id'], ['hotel_amenities.id'], name='room_amenities_hotel_amenities_id_fkey'),
    sa.ForeignKeyConstraint(['room_id'], ['rooms.id'], name='room_amenities_room_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='room_amenities_pkey')
    )
    op.create_index('ix_room_amenities_id', 'room_amenities', ['id'], unique=False)
    op.create_table('media',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('image_url', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('entity_type', postgresql.ENUM('HOTEL', 'ROOM', 'ICON', 'AVATAR', name='entitytype'), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='media_pkey')
    )
    op.create_index('ix_media_id', 'media', ['id'], unique=False)
    op.create_table('hotel_amenities',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('hotel_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('amenity_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['amenity_id'], ['amenities.id'], name='hotel_amenities_amenity_id_fkey'),
    sa.ForeignKeyConstraint(['hotel_id'], ['hotels.id'], name='hotel_amenities_hotel_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='hotel_amenities_pkey')
    )
    op.create_index('ix_hotel_amenities_id', 'hotel_amenities', ['id'], unique=False)
    op.create_table('people',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('people_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('first_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('is_owner', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('birth_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='people_pkey'),
    sa.UniqueConstraint('email', name='people_email_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_people_id', 'people', ['id'], unique=False)
    op.create_table('owners',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('person_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['person_id'], ['people.id'], name='owners_person_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='owners_pkey'),
    sa.UniqueConstraint('person_id', name='owners_person_id_key')
    )
    op.create_index('ix_owners_id', 'owners', ['id'], unique=False)
    op.drop_table('room_img')
    op.drop_table('amenities_room')
    op.drop_table('hotel_img')
    op.drop_table('amenities_hotel')
    op.drop_table('owner')
    # ### end Alembic commands ###
